
// alembic_out_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  3.000000
 // --table_div  92.013825
 // --table_op  0.250000

struct tablealembic_out { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tablealembic_out_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tablealembic_out&() const { return *(tablealembic_out*)this; }
};

 static tablealembic_out_imp<200> alembic_out_table __rt_data = {
	0,-0.833333,16.5833,200, {
	0.000000000000,-0.004810042467,-0.009637593449,-0.014482420501,-0.019344292150,
	-0.024222977849,-0.029118247932,-0.034029873577,-0.038957626757,-0.043901280204,
	-0.048860607361,-0.053835382345,-0.058825379902,-0.063830375371,-0.068850144635,
	-0.073884464092,-0.078933110605,-0.083995861471,-0.089072494376,-0.094162787364,
	-0.099266518792,-0.104383467300,-0.109513411770,-0.114656131293,-0.119811405134,
	-0.124979012698,-0.130158733493,-0.135350347102,-0.140553633147,-0.145768371258,
	-0.150994341041,-0.156231322047,-0.161479093745,-0.166737435484,-0.172006126471,
	-0.177284945737,-0.182573672108,-0.187872084174,-0.193179960264,-0.198497078411,
	-0.203823216324,-0.209158151356,-0.214501660474,-0.219853520225,-0.225213506702,
	-0.230581395510,-0.235956961731,-0.241339979879,-0.246730223868,-0.252127466959,
	-0.257531481723,-0.262942039983,-0.268358912764,-0.273781870235,-0.279210681647,
	-0.284645115260,-0.290084938276,-0.295529916752,-0.300979815516,-0.306434398065,
	-0.311893426470,-0.317356661249,-0.322823861251,-0.328294783514,-0.333769183118,
	-0.339246813018,-0.344727423868,-0.350210763610,-0.355696576666,-0.361184604271,
	-0.366674584934,-0.372166253864,-0.377659342594,-0.383153578627,-0.388648685067,
	-0.394144380224,-0.399640377197,-0.405136383423,-0.410632100181,-0.416127222072,
	-0.421621436447,-0.427114422797,-0.432605852087,-0.438095386054,-0.443582676434,
	-0.449067364147,-0.454549078409,-0.460027435790,-0.465502039199,-0.470972476797,
	-0.476438320839,-0.481899126429,-0.487354430206,-0.492803748927,-0.498246577974,
	-0.503682389757,-0.509110632032,-0.514530726109,-0.519942064964,-0.525344011249,
	-0.530735895197,-0.536117012422,-0.541486621622,-0.546843942177,-0.552188151660,
	-0.557518383253,-0.562833723094,-0.568133207551,-0.573415820451,-0.578680490282,
	-0.583926087380,-0.589151421154,-0.594355237362,-0.599536215486,-0.604692966268,
	-0.609824029441,-0.614927871739,-0.620002885242,-0.625047386155,-0.630059614093,
	-0.635037731981,-0.639979826671,-0.644883910381,-0.649747923076,-0.654569735907,
	-0.659347155807,-0.664077931368,-0.668759760072,-0.673390296968,-0.677967164838,
	-0.682487965871,-0.686950294831,-0.691351753666,-0.695689967431,-0.699962601388,
	-0.704167379046,-0.708302100884,-0.712364663435,-0.716353078371,-0.720265491192,
	-0.724100199100,-0.727855667655,-0.731530545786,-0.735123678800,-0.738634119051,
	-0.742061134010,-0.745404211545,-0.748663062315,-0.751837619246,-0.754928034181,
	-0.757934671837,-0.760858101307,-0.763699085386,-0.766458568055,-0.769137660469,
	-0.771737625831,-0.774259863517,-0.776705892792,-0.779077336465,-0.781375904752,
	-0.783603379609,-0.785761599753,-0.787852446515,-0.789877830672,-0.791839680324,
	-0.793739929886,-0.795580510189,-0.797363339704,-0.799090316851,-0.800763313349,
	-0.802384168548,-0.803954684678,-0.805476622943,-0.806951700384,-0.808381587437,
	-0.809767906116,-0.811112228740,-0.812416077142,-0.813680922305,-0.814908184355,
	-0.816099232856,-0.817255387375,-0.818377918256,-0.819468047574,-0.820526950228,
	-0.821555755154,-0.822555546618,-0.823527365577,-0.824472211077,-0.825391041689,
	-0.826284776949,-0.827154298802,-0.828000453038,-0.828824050706,-0.829625869513,
	-0.830406655184,-0.831167122791,-0.831907958052,-0.832629818578,-0.833333335089
	}
};

double always_inline alembic_outclip(double x) {
    double f = fabs(x);
    f = f * alembic_out_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = alembic_out_table.data[0];
    } else if (i >= alembic_out_table.size-1) {
        f = alembic_out_table.data[alembic_out_table.size-1];
    } else {
    f -= i;
    f = alembic_out_table.data[i]*(1-f) + alembic_out_table.data[i+1]*f;
    }
    return copysign(f, x);
}

