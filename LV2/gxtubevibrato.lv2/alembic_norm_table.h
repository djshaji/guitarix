
// alembic_norm_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  0.500000
 // --table_div  2.578949
 // --table_op  0.250000

struct tablealembic_norm { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tablealembic_norm_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tablealembic_norm&() const { return *(tablealembic_norm*)this; }
};

 static tablealembic_norm_imp<200> alembic_norm_table __rt_data = {
	0,-0.83333,99.5,200, {
	0.000000000000,-0.009470083223,-0.017731640171,-0.024967931771,-0.031335264428,
	-0.036966948878,-0.041976678005,-0.046461408795,-0.050503821185,-0.054174415857,
	-0.057533303969,-0.060631734028,-0.063513394487,-0.066215524993,-0.068769864373,
	-0.071203459345,-0.073539354388,-0.075797180240,-0.077993655908,-0.080143016896,
	-0.082257380488,-0.084347057341,-0.086420817261,-0.088486115921,-0.090549288232,
	-0.092615713287,-0.094689955055,-0.096775882372,-0.098876771299,-0.100995392421,
	-0.103134085302,-0.105294821989,-0.107479261182,-0.109688794424,-0.111924585502,
	-0.114187604048,-0.116478654197,-0.118798399029,-0.121147381411,-0.123526041774,
	-0.125934733272,-0.128373734712,-0.130843261577,-0.133343475431,-0.135874491932,
	-0.138436387674,-0.141029206016,-0.143652962052,-0.146307646854,-0.148993231082,
	-0.151709668072,-0.154456896460,-0.157234842425,-0.160043421601,-0.162882540702,
	-0.165752098914,-0.168651989080,-0.171582098706,-0.174542310823,-0.177532504724,
	-0.180552556584,-0.183602339992,-0.186681726414,-0.189790585570,-0.192928785768,
	-0.196096194186,-0.199292677110,-0.202518100137,-0.205772328349,-0.209055226463,
	-0.212366658953,-0.215706490160,-0.219074584382,-0.222470805950,-0.225895019296,
	-0.229347089009,-0.232826879880,-0.236334256942,-0.239869085509,-0.243431231199,
	-0.247020559961,-0.250636938096,-0.254280232273,-0.257950309543,-0.261647037355,
	-0.265370283562,-0.269119916429,-0.272895804646,-0.276697817326,-0.280525824016,
	-0.284379694696,-0.288259299786,-0.292164510146,-0.296095197078,-0.300051232329,
	-0.304032488089,-0.308038836993,-0.312070152125,-0.316126307011,-0.320207175624,
	-0.324312632382,-0.328442552146,-0.332596810225,-0.336775282367,-0.340977844765,
	-0.345204374052,-0.349454747302,-0.353728842028,-0.358026536184,-0.362347708157,
	-0.366692236774,-0.371060001294,-0.375450881411,-0.379864757251,-0.384301509372,
	-0.388761018760,-0.393243166833,-0.397747835433,-0.402274906828,-0.406824263715,
	-0.411395789209,-0.415989366850,-0.420604880599,-0.425242214835,-0.429901254356,
	-0.434581884378,-0.439283990530,-0.444007458857,-0.448752175816,-0.453518028277,
	-0.458304903518,-0.463112689229,-0.467941273504,-0.472790544845,-0.477660392161,
	-0.482550704763,-0.487461372362,-0.492392285074,-0.497343333413,-0.502314408293,
	-0.507305401022,-0.512316203307,-0.517346707248,-0.522396805341,-0.527466390470,
	-0.532555355912,-0.537663595335,-0.542791002792,-0.547937472726,-0.553102899964,
	-0.558287179719,-0.563490207584,-0.568711879538,-0.573952091937,-0.579210741521,
	-0.584487725403,-0.589782941076,-0.595096286409,-0.600427659644,-0.605776959396,
	-0.611144084655,-0.616528934778,-0.621931409493,-0.627351408898,-0.632788833455,
	-0.638243583994,-0.643715561709,-0.649204668158,-0.654710805261,-0.660233875299,
	-0.665773780911,-0.671330425099,-0.676903711218,-0.682493542981,-0.688099824457,
	-0.693722460068,-0.699361354588,-0.705016413144,-0.710687541211,-0.716374644616,
	-0.722077629533,-0.727796402481,-0.733530870326,-0.739280940281,-0.745046519897,
	-0.750827517071,-0.756623840041,-0.762435397383,-0.768262098012,-0.774103851183,
	-0.779960566484,-0.785832153840,-0.791718523511,-0.797619586088,-0.803535252495,
	-0.809465433988,-0.815410042150,-0.821368988895,-0.827342186461,-0.833329547417
	}
};

double always_inline alembic_normclip(double x) {
    double f = fabs(x);
    f = f * alembic_norm_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = alembic_norm_table.data[0];
    } else if (i >= alembic_norm_table.size-1) {
        f = alembic_norm_table.data[alembic_norm_table.size-1];
    } else {
    f -= i;
    f = alembic_norm_table.data[i]*(1-f) + alembic_norm_table.data[i+1]*f;
    }
    return copysign(f, x);
}

